/*
Copyright (c) 2011, Ole K. Christensen
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

¥ Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

¥ Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#pragma once

#include "Attack.h"
#include "Board.h"
#include "General.h"
#include "Move.h"

/**************************************************************************************************/
/*                                                                                                */
/*                                       CONSTANTS & MACROS */
/*                                                                                                */
/**************************************************************************************************/

// Move generation phases:

enum MOVEGEN_PHASE {
  gen_None = 0,

  gen_A = 1,   // En prise captures
  gen_B = 2,   // Promotions (non-capturing)
  gen_C = 3,   // Recaptures
  gen_D = 4,   // Safe captures
  gen_E = 5,   // Escapes
  gen_F1 = 6,  // Killer1
  gen_F2 = 7,  // Killer2
  gen_G = 8,   // Castling
  gen_H = 9,   // Non captures
  gen_I = 10,  // Sacrifices
  gen_J = 11,  // Safe checks
  gen_K = 12,  // Far pawns
  gen_L = 13,  // Check evasion

  gen_Rfm = 14,  // Refutation moves (not generated by Move Generator)
  gen_Null = 15  // Null moves (not generated by Move Generator)
};

/**************************************************************************************************/
/*                                                                                                */
/*                                        TYPE DEFINITIONS */
/*                                                                                                */
/**************************************************************************************************/

typedef struct /* 8 bytes */
{
  SQUARE dir;   // Direction corresponding to lowbit.
  INT offset;   // Offset (in bytes) to "next" entry (i.e. excl lowbit)
  ATTACK Nbit;  // KnightBit in direction.
} N_DATA;

typedef struct /* 16 bytes */
{
  SQUARE dir;     // Direction corresponding to lowbit.
  INT offset;     // Offset (in bytes) to "next" entry (i.e. excl lowbit)
  ATTACK RBbit;   // Rook/Bishop-Bit in direction.
  ATTACK Qbit;    // QueenBit in direction.
  ATTACK rayBit;  // RayBits in direction.
} QRB_DATA;

typedef struct {
  N_DATA Ndata[256];
  QRB_DATA QRBdata[256];
} MOVEGEN_COMMON;
